{"ast":null,"code":"import { Curve, Vector3, Vector4 } from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n  constructor(degree, knots /* array of reals */, controlPoints /* array of Vector(2|3|4) */, startKnot /* index in knots */, endKnot /* index in knots */) {\n    super();\n    this.degree = degree;\n    this.knots = knots;\n    this.controlPoints = [];\n    // Used by periodic NURBS to remove hidden spans\n    this.startKnot = startKnot || 0;\n    this.endKnot = endKnot || this.knots.length - 1;\n    for (let i = 0; i < controlPoints.length; ++i) {\n      // ensure Vector4 for control points\n      const point = controlPoints[i];\n      this.controlPoints[i] = new Vector4(point.x, point.y, point.z, point.w);\n    }\n  }\n  getPoint(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const point = optionalTarget;\n    const u = this.knots[this.startKnot] + t * (this.knots[this.endKnot] - this.knots[this.startKnot]); // linear mapping t->u\n\n    // following results in (wx, wy, wz, w) homogeneous point\n    const hpoint = NURBSUtils.calcBSplinePoint(this.degree, this.knots, this.controlPoints, u);\n    if (hpoint.w !== 1.0) {\n      // project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n      hpoint.divideScalar(hpoint.w);\n    }\n    return point.set(hpoint.x, hpoint.y, hpoint.z);\n  }\n  getTangent(t) {\n    let optionalTarget = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Vector3();\n    const tangent = optionalTarget;\n    const u = this.knots[0] + t * (this.knots[this.knots.length - 1] - this.knots[0]);\n    const ders = NURBSUtils.calcNURBSDerivatives(this.degree, this.knots, this.controlPoints, u, 1);\n    tangent.copy(ders[1]).normalize();\n    return tangent;\n  }\n}\nexport { NURBSCurve };","map":{"version":3,"names":["Curve","Vector3","Vector4","NURBSUtils","NURBSCurve","constructor","degree","knots","controlPoints","startKnot","endKnot","length","i","point","x","y","z","w","getPoint","t","optionalTarget","arguments","undefined","u","hpoint","calcBSplinePoint","divideScalar","set","getTangent","tangent","ders","calcNURBSDerivatives","copy","normalize"],"sources":["/Users/dimitrischatzopoulos/Desktop/dais/node_modules/aframe-extras/node_modules/three/examples/jsm/curves/NURBSCurve.js"],"sourcesContent":["import {\n\tCurve,\n\tVector3,\n\tVector4\n} from 'three';\nimport * as NURBSUtils from '../curves/NURBSUtils.js';\n\n/**\n * NURBS curve object\n *\n * Derives from Curve, overriding getPoint and getTangent.\n *\n * Implementation is based on (x, y [, z=0 [, w=1]]) control points with w=weight.\n *\n **/\n\nclass NURBSCurve extends Curve {\n\n\tconstructor(\n\t\tdegree,\n\t\tknots /* array of reals */,\n\t\tcontrolPoints /* array of Vector(2|3|4) */,\n\t\tstartKnot /* index in knots */,\n\t\tendKnot /* index in knots */\n\t) {\n\n\t\tsuper();\n\n\t\tthis.degree = degree;\n\t\tthis.knots = knots;\n\t\tthis.controlPoints = [];\n\t\t// Used by periodic NURBS to remove hidden spans\n\t\tthis.startKnot = startKnot || 0;\n\t\tthis.endKnot = endKnot || ( this.knots.length - 1 );\n\n\t\tfor ( let i = 0; i < controlPoints.length; ++ i ) {\n\n\t\t\t// ensure Vector4 for control points\n\t\t\tconst point = controlPoints[ i ];\n\t\t\tthis.controlPoints[ i ] = new Vector4( point.x, point.y, point.z, point.w );\n\n\t\t}\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst u = this.knots[ this.startKnot ] + t * ( this.knots[ this.endKnot ] - this.knots[ this.startKnot ] ); // linear mapping t->u\n\n\t\t// following results in (wx, wy, wz, w) homogeneous point\n\t\tconst hpoint = NURBSUtils.calcBSplinePoint( this.degree, this.knots, this.controlPoints, u );\n\n\t\tif ( hpoint.w !== 1.0 ) {\n\n\t\t\t// project to 3D space: (wx, wy, wz, w) -> (x, y, z, 1)\n\t\t\thpoint.divideScalar( hpoint.w );\n\n\t\t}\n\n\t\treturn point.set( hpoint.x, hpoint.y, hpoint.z );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\tconst tangent = optionalTarget;\n\n\t\tconst u = this.knots[ 0 ] + t * ( this.knots[ this.knots.length - 1 ] - this.knots[ 0 ] );\n\t\tconst ders = NURBSUtils.calcNURBSDerivatives( this.degree, this.knots, this.controlPoints, u, 1 );\n\t\ttangent.copy( ders[ 1 ] ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n}\n\nexport { NURBSCurve };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}